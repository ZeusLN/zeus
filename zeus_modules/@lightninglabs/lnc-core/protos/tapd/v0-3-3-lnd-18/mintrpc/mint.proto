syntax = "proto3";

import "taprootassets.proto";

package mintrpc;

option go_package = "github.com/lightninglabs/taproot-assets/taprpc/mintrpc";

service Mint {
    /* tapcli: `assets mint`
    MintAsset will attempt to mint the set of assets (async by default to
    ensure proper batching) specified in the request. The pending batch is
    returned that shows the other pending assets that are part of the next
    batch. This call will block until the operation succeeds (asset is staged
    in the batch) or fails.
    */
    rpc MintAsset (MintAssetRequest) returns (MintAssetResponse);

    /* tapcli: `assets mint finalize`
    FinalizeBatch will attempt to finalize the current pending batch.
    */
    rpc FinalizeBatch (FinalizeBatchRequest) returns (FinalizeBatchResponse);

    /* tapcli: `assets mint cancel`
    CancelBatch will attempt to cancel the current pending batch.
    */
    rpc CancelBatch (CancelBatchRequest) returns (CancelBatchResponse);

    /* tapcli: `assets mint batches`
    ListBatches lists the set of batches submitted to the daemon, including
    pending and cancelled batches.
    */
    rpc ListBatches (ListBatchRequest) returns (ListBatchResponse);
}

message PendingAsset {
    // The version of asset to mint.
    taprpc.AssetVersion asset_version = 1;

    // The type of the asset to be created.
    taprpc.AssetType asset_type = 2;

    // The name, or "tag" of the asset. This will affect the final asset ID.
    string name = 3;

    /*
    A blob that resents metadata related to the asset. This will affect the
    final asset ID.
    */
    taprpc.AssetMeta asset_meta = 4;

    /*
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    */
    uint64 amount = 5;

    /*
    If true, then the asset will be created with a new group key, which allows
    for future asset issuance.
    */
    bool new_grouped_asset = 6;

    // The specific group key this asset should be minted with.
    bytes group_key = 7;

    /*
    The name of the asset in the batch that will anchor a new asset group.
    This asset will be minted with the same group key as the anchor asset.
    */
    string group_anchor = 8;
}

message MintAsset {
    // The version of asset to mint.
    taprpc.AssetVersion asset_version = 1;

    // The type of the asset to be created.
    taprpc.AssetType asset_type = 2;

    // The name, or "tag" of the asset. This will affect the final asset ID.
    string name = 3;

    /*
    A blob that resents metadata related to the asset. This will affect the
    final asset ID.
    */
    taprpc.AssetMeta asset_meta = 4;

    /*
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    */
    uint64 amount = 5;

    /*
    If true, then the asset will be created with a group key, which allows for
    future asset issuance.
    */
    bool new_grouped_asset = 6;

    /*
    If true, then a group key or group anchor can be set to mint this asset into
    an existing asset group.
    */
    bool grouped_asset = 7;

    // The specific group key this asset should be minted with.
    bytes group_key = 8;

    /*
    The name of the asset in the batch that will anchor a new asset group.
    This asset will be minted with the same group key as the anchor asset.
    */
    string group_anchor = 9;
}

message MintAssetRequest {
    /*
    The asset to be minted.
    */
    MintAsset asset = 1;

    /*
    If true, then the assets currently in the batch won't be returned in the
    response. This is mainly to avoid a lot of data being transmitted and
    possibly printed on the command line in the case of a very large batch.
    */
    bool short_response = 2;
}

message MintAssetResponse {
    // The pending batch the asset was added to.
    MintingBatch pending_batch = 1;
}

message MintingBatch {
    /*
    A public key serialized in compressed format that can be used to uniquely
    identify a pending minting batch. Responses that share the same key will be
    batched into the same minting transaction.
    */
    bytes batch_key = 1;

    /*
    The transaction ID of the batch. Only populated if the batch has been
    committed.
    */
    string batch_txid = 2;

    // The state of the batch.
    BatchState state = 3;

    // The assets that are part of the batch.
    repeated PendingAsset assets = 4;
}

enum BatchState {
    BATCH_STATE_UNKNOWN = 0;
    BATCH_STATE_PENDING = 1;
    BATCH_STATE_FROZEN = 2;
    BATCH_STATE_COMMITTED = 3;
    BATCH_STATE_BROADCAST = 4;
    BATCH_STATE_CONFIRMED = 5;
    BATCH_STATE_FINALIZED = 6;
    BATCH_STATE_SEEDLING_CANCELLED = 7;
    BATCH_STATE_SPROUT_CANCELLED = 8;
}

message FinalizeBatchRequest {
    /*
    If true, then the assets currently in the batch won't be returned in the
    response. This is mainly to avoid a lot of data being transmitted and
    possibly printed on the command line in the case of a very large batch.
    */
    bool short_response = 1;

    // The optional fee rate to use for the minting transaction, in sat/kw.
    uint32 fee_rate = 2;
}

message FinalizeBatchResponse {
    // The finalized batch.
    MintingBatch batch = 1;
}

message CancelBatchRequest {
}

message CancelBatchResponse {
    // The internal public key of the batch.
    bytes batch_key = 1;
}

message ListBatchRequest {
    // The optional batch key of the batch to list.
    oneof filter {
        // The optional batch key of the batch to list, specified as raw bytes
        // (gRPC only).
        bytes batch_key = 1;

        // The optional batch key of the batch to list, specified as a hex
        // encoded string (use this for REST).
        string batch_key_str = 2;
    }
}

message ListBatchResponse {
    repeated MintingBatch batches = 1;
}
