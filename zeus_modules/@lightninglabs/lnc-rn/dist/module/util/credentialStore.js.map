{"version":3,"names":["LncCredentialStore","constructor","pairingPhrase","serverHost","_serverHost","host","_pairingPhrase","phrase","localKey","_localKey","key","remoteKey","_remoteKey","isPaired","clear"],"sources":["credentialStore.ts"],"sourcesContent":["import { CredentialStore } from '../types/lnc';\n\nexport default class LncCredentialStore implements CredentialStore {\n    private _serverHost: string = '';\n    private _localKey: string = '';\n    private _remoteKey: string = '';\n    private _pairingPhrase: string = '';\n\n    /**\n     * Constructs a new `LncCredentialStore` instance\n     */\n    constructor(pairingPhrase?: string) {\n        if (pairingPhrase) this.pairingPhrase = pairingPhrase;\n    }\n\n    //\n    // Public fields which implement the `CredentialStore` interface\n    //\n\n    /** Stores the host:port of the Lightning Node Connect proxy server to connect to */\n    get serverHost() {\n        return this._serverHost;\n    }\n\n    /** Stores the host:port of the Lightning Node Connect proxy server to connect to */\n    set serverHost(host: string) {\n        this._serverHost = host;\n    }\n\n    /** Stores the LNC pairing phrase used to initialize the connection to the LNC proxy */\n    get pairingPhrase() {\n        return this._pairingPhrase;\n    }\n\n    /** Stores the LNC pairing phrase used to initialize the connection to the LNC proxy */\n    set pairingPhrase(phrase: string) {\n        this._pairingPhrase = phrase;\n    }\n\n    /** Stores the local private key which LNC uses to reestablish a connection */\n    get localKey() {\n        return this._localKey;\n    }\n\n    /** Stores the local private key which LNC uses to reestablish a connection */\n    set localKey(key: string) {\n        this._localKey = key;\n    }\n\n    /** Stores the remote static key which LNC uses to reestablish a connection */\n    get remoteKey() {\n        return this._remoteKey;\n    }\n\n    /** Stores the remote static key which LNC uses to reestablish a connection */\n    set remoteKey(key: string) {\n        this._remoteKey = key;\n    }\n\n    /**\n     * Read-only field which should return `true` if the client app has prior\n     * credentials persisted in teh store\n     */\n    get isPaired() {\n        return !!this._remoteKey || !!this._pairingPhrase;\n    }\n\n    /** Clears any persisted data in the store */\n    clear() {\n        this._serverHost = '';\n        this._localKey = '';\n        this._remoteKey = '';\n        this._pairingPhrase = '';\n    }\n}\n"],"mappings":";;;AAEA,eAAe,MAAMA,kBAAkB,CAA4B;EAM/D;AACJ;AACA;EACIC,WAAW,CAACC,aAAsB,EAAE;IAAA,qCARN,EAAE;IAAA,mCACJ,EAAE;IAAA,oCACD,EAAE;IAAA,wCACE,EAAE;IAM/B,IAAIA,aAAa,EAAE,IAAI,CAACA,aAAa,GAAGA,aAAa;EACzD;;EAEA;EACA;EACA;;EAEA;EACA,IAAIC,UAAU,GAAG;IACb,OAAO,IAAI,CAACC,WAAW;EAC3B;;EAEA;EACA,IAAID,UAAU,CAACE,IAAY,EAAE;IACzB,IAAI,CAACD,WAAW,GAAGC,IAAI;EAC3B;;EAEA;EACA,IAAIH,aAAa,GAAG;IAChB,OAAO,IAAI,CAACI,cAAc;EAC9B;;EAEA;EACA,IAAIJ,aAAa,CAACK,MAAc,EAAE;IAC9B,IAAI,CAACD,cAAc,GAAGC,MAAM;EAChC;;EAEA;EACA,IAAIC,QAAQ,GAAG;IACX,OAAO,IAAI,CAACC,SAAS;EACzB;;EAEA;EACA,IAAID,QAAQ,CAACE,GAAW,EAAE;IACtB,IAAI,CAACD,SAAS,GAAGC,GAAG;EACxB;;EAEA;EACA,IAAIC,SAAS,GAAG;IACZ,OAAO,IAAI,CAACC,UAAU;EAC1B;;EAEA;EACA,IAAID,SAAS,CAACD,GAAW,EAAE;IACvB,IAAI,CAACE,UAAU,GAAGF,GAAG;EACzB;;EAEA;AACJ;AACA;AACA;EACI,IAAIG,QAAQ,GAAG;IACX,OAAO,CAAC,CAAC,IAAI,CAACD,UAAU,IAAI,CAAC,CAAC,IAAI,CAACN,cAAc;EACrD;;EAEA;EACAQ,KAAK,GAAG;IACJ,IAAI,CAACV,WAAW,GAAG,EAAE;IACrB,IAAI,CAACK,SAAS,GAAG,EAAE;IACnB,IAAI,CAACG,UAAU,GAAG,EAAE;IACpB,IAAI,CAACN,cAAc,GAAG,EAAE;EAC5B;AACJ"}